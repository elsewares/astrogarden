---
import PostLayout from "../layouts/PostLayout.astro";
import ThreadLayout from "../layouts/ThreadLayout.astro";
import ProseWrapper from "../components/layouts/ProseWrapper.astro";
import { getCollection, type CollectionEntry } from "astro:content";
import { render } from "astro:content";
import TableOfContents from "../components/layouts/TableOfContents.astro";
// Component imports
import Title1 from "../components/mdx/typography/Title1.astro";
import Title2 from "../components/mdx/typography/Title2.astro";
import Title3 from "../components/mdx/typography/Title3.astro";
import Title4 from "../components/mdx/typography/Title4.astro";
import TooltipLink from "../components/mdx/TooltipLink.astro";
import InternalTooltipLink from "../components/mdx/InternalTooltipLink.astro";
import Footnote from "../components/mdx/Footnote.astro";
import IntroParagraph from "../components/mdx/IntroParagraph.astro";
import ResourceBook from "../components/mdx/ResourceBook.astro";
import RemoteImage from "../components/mdx/RemoteImage.astro";
import BasicImage from "../components/mdx/BasicImage.astro";
import Spacer from "../components/mdx/Spacer.astro";

type ContentType = "essay" | "note" | "pattern" | "talk" | "thread";
type Collections = "essays" | "notes" | "patterns" | "talks" | "threads";

// Add type definitions for different frontmatter types
type BaseFrontmatter = {
	title: string;
	startDate: Date;
	topics?: string[];
};

type ThreadFrontmatter = BaseFrontmatter & {
	type: "thread";
};

interface Props {
	entry: CollectionEntry<Collections>;
	type: ContentType;
}

// Get params from URL
export async function getStaticPaths() {
	const essays = await getCollection("essays");
	const notes = await getCollection("notes");
	const patterns = await getCollection("patterns");
	const talks = await getCollection("talks");
	const threads = await getCollection("threads");

	return [
		...essays.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, type: "essay" } as const,
		})),
		...notes.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, type: "note" } as const,
		})),
		...patterns.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, type: "pattern" } as const,
		})),
		...talks.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, type: "talk" } as const,
		})),
		...threads.map((entry) => ({
			params: { slug: entry.id },
			props: { entry, type: "thread" } as const,
		})),
	];
}

const { entry } = Astro.props;
const { Content, headings } = await render(entry);

const components = {
	h1: Title1,
	h2: Title2,
	h3: Title3,
	h4: Title4,
	a: TooltipLink,
	img: BasicImage,
	InternalTooltipLink,
	IntroParagraph,
	Footnote,
	BasicImage,
	ResourceBook,
	RemoteImage,
	Spacer,
};

// Type guard for checking if data has TOC
function hasTOC(data: any): data is { toc: boolean } {
	return "toc" in data;
}

// Type guard for checking if frontmatter is ThreadFrontmatter
function isThreadFrontMatter(data: any): data is ThreadFrontmatter {
	return data.type === "thread";
}

// Prepare frontmatter data based on type
const frontmatter = entry.data;
---

{
	isThreadFrontMatter(frontmatter) ? (
		<ThreadLayout frontmatter={frontmatter}>
			<ProseWrapper>
				<Content components={components} />
			</ProseWrapper>
		</ThreadLayout>
	) : (
		<PostLayout frontmatter={frontmatter} headings={headings}>
			<ProseWrapper>
				{headings.length > 0 && hasTOC(frontmatter) && frontmatter.toc && (
					<TableOfContents headings={headings} />
				)}
				<Content components={components} />
			</ProseWrapper>
		</PostLayout>
	)
}
